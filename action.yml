name: 'Deploy mdbook docs'
description: 'GitHub Action to automatically build, test and deploy a versioned mdBook project to GitHub Pages.'
branding:
  icon: 'book'
  color: 'blue'

inputs:
  github-token:
    description: 'GitHub token for deployment.'
    required: true
  version:
    type: string
    description: "Version of the documentation to deploy"
    required: false
    default: "latest"
  docs-dir:
    type: string
    description: "Directory containing the mdbook documentation"
    required: false
    default: "docs"
  mdbook-version:
    type: string
    description: "Version of mdbook to use"
    required: false
    default: "latest"
  enable-tests:
    type: boolean
    description: "Disable mdbook tests"
    required: false
    default: true
  books-outdir:
    type: string
    description: "Directory to store the built books"
    required: false
    default: "mdbooks"
  force-orphan:
    type: boolean
    description: "Force gh-pages branch to be orphan"
    required: false
    default: false
  publish-branch:
    type: string
    description: "Branch to publish the documentation"
    required: false
    default: "gh-pages"

runs:
  using: composite
  steps:

    - name: Check runner OS
      if: runner.os != 'Linux'
      shell: bash
      run: |
        echo "::error title=â›” error hint::Only Linux is supported for this action."
        exit 1

    - name: Install latest mdbook
      shell: bash
      env:
        MDBOOK_LATEST_API: "https://api.github.com/repos/rust-lang/mdbook/releases/${{ inputs.mdbook-version || 'latest' }}"
        MDBOOK_DOWNLOAD_URL: "https://github.com/rust-lang/mdbook/releases/download"
      run: |
        echo "::group::Install mdbook"
        TAG=$(curl "${MDBOOK_LATEST_API}" | jq -r .tag_name)
        URL="${MDBOOK_DOWNLOAD_URL}/${TAG}/mdbook-${TAG}-x86_64-unknown-linux-gnu.tar.gz"
        MDBOOK_INSTALL_DIR="${PWD}/.mdbook_$(date +%s)"
        mkdir -p "${MDBOOK_INSTALL_DIR}"
        curl -sSL "${URL}" | tar -xz --directory="${MDBOOK_INSTALL_DIR}"
        echo "${MDBOOK_INSTALL_DIR}" >> "${GITHUB_PATH}"
        echo "::endgroup::"

    - name: Build Book
      shell: bash
      working-directory: ${{ inputs.docs-dir }}
      id: build-book
      run: |
        echo "::group::Building the book"
        if [ ${{ inputs.version }} == ${{ github.event.repository.default_branch }} ] || [ ${{ inputs.version }} == 'latest' ]; then
          DEST_DIR=latest
        else
          DEST_DIR=${{ inputs.version }}
        fi
        echo destination_dir=${DEST_DIR} >> "${GITHUB_OUTPUT}"
        mdbook build --dest-dir=${{ inputs.books-outdir }}/${DEST_DIR}
        echo "::endgroup::"

    - name: Test Book
      if: inputs.enable-tests
      shell: bash
      working-directory: ${{ inputs.docs-dir }}
      run: |
        echo "::group::Testing the book"
        mdbook test
        echo "::endgroup::"

    # Widely used GitHub action to deploy to gh-pages
    # it does not support deployment of multiple versions yet
    # as it is not possible to keep files and make the branch orphan yet:
    # https://github.com/peaceiris/actions-gh-pages/issues/455
    # Although it can be used if only the latest version is deployed
    # or if the gh-pages branch history is required
    - name: Deploy Book
      if: ${{ !inputs.force-orphan }}
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ inputs.github-token }}
        publish_dir: ${{ inputs.docs-dir }}/${{ inputs.books-outdir }}/${{ steps.build-book.outputs.destination_dir }}
        destination_dir: ${{ steps.build-book.outputs.destination_dir }}
        publish_branch: ${{ inputs.publish-branch }}
        keep_files: true # to allow deployment of multiple versions
        force_orphan: ${{ inputs.force-orphan }}

    - name: Deploy book
      if: ${{ inputs.force-orphan }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        MDBOOK_DEST_DIR: ${{ steps.build-book.outputs.destination_dir }}
      run: |
        echo "::group::Deploying the book"
        # Configure git
        git config user.name "Deploy from CI"
        git config user.email ""
        # Check if the deploy branch exists
        if [ $(gh api "/repos/${GITHUB_REPOSITORY}/branches/${{ inputs.publish-branch }}" > /dev/null 2>&1; echo $?) -eq 1 ]; then
          git checkout --orphan ${{ inputs.publish-branch }}
          git rm -rf .
          git commit --allow-empty -m "Initialize ${{ inputs.publish-branch }} branch"
        else
          git fetch origin ${{ inputs.publish-branch }}
          git checkout ${{ inputs.publish-branch }}
        fi
        # Remove the previous version of the book
        rm -rf ${MDBOOK_DEST_DIR}
        # Move the new version of the book
        mv "${{ inputs.docs-dir }}/${{ inputs.books-outdir }}/${MDBOOK_DEST_DIR}" "${MDBOOK_DEST_DIR}"
        # Add the new version of the book
        git add "${MDBOOK_DEST_DIR}"
        git commit --amend -m "Deploy ${GITHUB_SHA::7}"
        git push --force --set-upstream origin ${{ inputs.publish-branch }}
        echo "::endgroup::"
